<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[obsidian]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>obsidian</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sun, 25 Aug 2024 05:14:05 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 25 Aug 2024 05:14:02 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[Decomposition]]></title><description><![CDATA[ 
 <br>Prev: <a data-href="Mod 3 - Functional Dependencies" href="database-systems/mod-3-functional-dependencies.html" class="internal-link" target="_self" rel="noopener">Mod 3 - Functional Dependencies</a><br>Decomposition - process of breaking down the functions of an organization into progressively greater levels of detail<br>
<br>Helps in elimination of redundancy, inconsistencies and anomalies
<br><br>
<br><img alt="Pasted image 20240824213403.png" src="database-systems/pasted-image-20240824213403.png">
<br><br>
<br>Lossless join property is necessary if the decomposed relation is to be recovered from the decomposition( basically intial table before it was decomposed)
<br>Let R be a schema and F be a set of FD's on R, and  = (R1,R2) be a decomposition of R. Then  has a lossless join with respect to F iff

<br>R1  R2 -&gt; (R1 - R2) or
<br>R2  R1 -&gt; (R2 - R1)<br>
-where such FD exist in Closure of F<br>
This is a sufficient condition but not a necessary condition
<br><img alt="Pasted image 20240824214651.png" src="database-systems/pasted-image-20240824214651.png">
<br><img alt="Pasted image 20240824214734.png" src="database-systems/pasted-image-20240824214734.png">


<br>Why do we preserve the dependency ?<br>
<br>To check easily the updates to the database don't result in illegal relations being created
<br>It would be nice if our design allowed us to check updates without having to compute natural joins
<br><br>
<br>If a decomposition is not dependency-preserving, some dependency is lost in the decomposition
<br>To verify : Take joins of two or more relations in the decomposition to get a relation that contains all of the attributes in the dependency under consideration and then check that the dependency holds on the result of the joins
<br><img alt="Pasted image 20240824215317.png" src="database-systems/pasted-image-20240824215317.png">
<br><img alt="Pasted image 20240824215331.png" src="database-systems/pasted-image-20240824215331.png">
<br><br>Next: <a data-href="Normalization" href="database-systems/normalization.html" class="internal-link" target="_self" rel="noopener">Normalization</a> ]]></description><link>database-systems/decomposition.html</link><guid isPermaLink="false">Database Systems/Decomposition.md</guid><pubDate>Sat, 24 Aug 2024 18:12:23 GMT</pubDate><enclosure url="database-systems/pasted-image-20240824213403.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="database-systems/pasted-image-20240824213403.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Mod 1 - Schema Architecture]]></title><description><![CDATA[ 
 <br>Prev: <a data-href="Module 1 - Categories" href="database-systems/module-1-categories.html" class="internal-link" target="_self" rel="noopener">Module 1 - Categories</a><br><br>
<br>Defines DBMS schemas at three levels:

<br>Internal Schema - at the internal level to describe physical storage structures and access paths ; Typically uses a physical data model
<br>Conceptual Schema - at the conceptual level to describe the structure and constraints for the whole data base for a community of users; Uses conceptual data model
<br>External Schema - at the external level to describe the various user views; User same data model as the conceptual schema


<br><br><br>
<br>Database is directly available for storing and retrieving the data
<br><br>
<br>End user doesn't access the database directly
<br>Eg: Desktop applications 
<br>Database can access through third party services
<br><br>
<br>Client doesn't communicate directly to the server
<br>A layer between client and server that manages the query processing and transaction management
<br>Eg: web based application
<br><br>
<br>Provides client server architecture
<br>Has separate presentation, processing and data management functions
<br><img alt="Pasted image 20240825024419.png" src="lib/media/pasted-image-20240825024419.png"><br><br>
<br>Combines everything into single system including - DBMS software, hardware, application programs and user interface processing software
<br>User can still connect through a remote terminal, however, all processing is done at centralized site
]]></description><link>database-systems/mod-1-schema-architecture.html</link><guid isPermaLink="false">Database Systems/Mod 1 - Schema Architecture.md</guid><pubDate>Sat, 24 Aug 2024 21:15:30 GMT</pubDate><enclosure url="lib/media/pasted-image-20240825024419.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib/media/pasted-image-20240825024419.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Entities Relationship Model]]></title><description><![CDATA[ 
 <br><br>
<br>
Was developed to facilitate database design by allowing specification of an enterprise schema that represents the overall logical structures of a database

<br>
Employs three basic concepts:

<br>Entity sets
<br>Relationship sets
<br>Attributes


<br>
ER model also has a diagrammatic representation - ER Diagram - expresses the overall logical structure of a database graphically

<br>
To represent the relationship between different stakeholders

<br>
<img alt="Pasted image 20240824175727.png" src="database-systems/pasted-image-20240824175727.png">

<br>
Entity - Object that exists and is distinguishable from other objects, eg: specific person, company, event, plant

<br>
Entity set - set of entities of the same type and have the same properties, eg: set of all persons

<br>
Entity is represented by a set of attributes, eg: instructor = (id, name, salary)

<br>
Primary key - uniquely identifying attrtibute of the entity set 

<br>
<img alt="Pasted image 20240824180108.png" src="database-systems/pasted-image-20240824180108.png">

<br><br>
<br><img alt="Pasted image 20240824180250.png" src="database-systems/pasted-image-20240824180250.png">
<br>eg:<img alt="Pasted image 20240824180351.png" src="database-systems/pasted-image-20240824180351.png"><br><br><br>
<br>Can be divided into smaller subparts, which represent more basic attributes with independent meaning
<br>Eg: Qualification(degree name, year, college name)
<br><br>
<br>Attributes are indivisible values
<br>Eg: phone number
<br><br>
<br>Single value for a particular attribute
<br>Eg: age, place of birth
<br><br>
<br>Multiple values for a particular attribute
<br>Eg: degree, course_enrolled, email id
<br><br>
<br>LOOK INTO THIS
<br><br>
<br>Ex: College Degree
<br><br>
<br>Composite and multi valued attributes are nested
<br>Ex: Phone Address(phone(area code, phoneno))
<br><br>
<br>An attribute or collection of attributes whose values uniquely identify an entity from the entity set
<br>Super Keys - Set of attributes that collectively identifies an entity in an entity set
<br>Candidate Key - A minimal super key. An entity set may have more than one candidate key
<br>Primary Key - One of the candidate keys chosen by the database designer to uniquely identify the entity set
<br><img alt="Pasted image 20240824181946.png" src="database-systems/pasted-image-20240824181946.png">
<br><img alt="Pasted image 20240824182012.png" src="database-systems/pasted-image-20240824182012.png">
<br><img alt="Pasted image 20240824182050.png" src="database-systems/pasted-image-20240824182050.png">
<br><br><img alt="Pasted image 20240824182235.png" src="database-systems/pasted-image-20240824182235.png"><br><br><img alt="Pasted image 20240824182307.png" src="database-systems/pasted-image-20240824182307.png"><br>_Next: <a data-href="Module 2 - Keys" href="database-systems/module-2-keys.html" class="internal-link" target="_self" rel="noopener">Module 2 - Keys</a> ]]></description><link>database-systems/mod-2-entities-relationship-model.html</link><guid isPermaLink="false">Database Systems/Mod 2 - Entities Relationship Model.md</guid><pubDate>Sat, 24 Aug 2024 21:24:01 GMT</pubDate><enclosure url="database-systems/pasted-image-20240824175727.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="database-systems/pasted-image-20240824175727.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Mod 2 - Relational Data Model]]></title><description><![CDATA[ 
 <br>Previous : <a data-href="Module 2 - Keys" href="database-systems/module-2-keys.html" class="internal-link" target="_self" rel="noopener">Module 2 - Keys</a><br>Database - represents a collections of relations<br>
Relational model - represents how data is stored in relational databases<br>
Relation - table is called relation<br>
Tuple - row is called tuple<br>
Attribute - A column header is called as attribute<br>
Degree - Total number of attributes which in the relation is called the degree of the relation<br>
Cardinality - Total number of rows present in the table<br>
Domain - Set of atomic value<br>
Cartesian product - specifies all possible combinations of values from the underlying domains<br><img alt="Pasted image 20240825010229.png" src="lib/media/pasted-image-20240825010229.png"><br>T - cartesian product<br>
R and S - cardinality of relation R and S<br><br> An irregularity or something which deviates from the expected or normal state<br>
Insertion anomalies: It may not be possible to store some information unless some other information is stored as well<br>
Redundant storage: some info is stored repeatedly<br>
Update anomalies: if one copy of redundant data is updated, inconsistency is created if the rest of the redundant copies are not updated as well<br>
Deletion anomalies: It may not be possible to delete some information without losing some other information as well<br>
Insertion anomaly and deletion anomaly - exist only due to redundancy, otherwise dont exist<br><br>
<br>Simplicity : Simpler than hierarchial and network model
<br>Structural Independence : Relational Model is only concerned with data and not with a structure. This can improve the performance of the model
<br>Easy to use : It is easy as tables consisting of rows and columns is quite natural and simple to understand
<br>Query Capability : It makes possible for a high-level query language such as SQL to avoid complex database navigation
<br>Data Independence : The structure of the database can be changed without having to change any application
<br><br>
<br>Few relational databases have limits on field lengths which can't exceed
<br>Relational databases can sometimes become complex as the amount of data grows, and the relations between pieces of data becomes more complicated
<br>Complex relational database systems may lead to isolated databases where the information cannot be shared from one system to another
]]></description><link>database-systems/mod-2-relational-data-model.html</link><guid isPermaLink="false">Database Systems/Mod 2 - Relational Data Model.md</guid><pubDate>Sat, 24 Aug 2024 19:39:52 GMT</pubDate><enclosure url="lib/media/pasted-image-20240825010229.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib/media/pasted-image-20240825010229.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Functional Dependency]]></title><description><![CDATA[ 
 <br>Prev: <a data-href="Module 3" href="database-systems/module-3.html" class="internal-link" target="_self" rel="noopener">Module 3</a><br><br>Primary key determines every attributes of a relation schema<br>
<br>Defines relationship among attributes of a relation schema
<br>Typically between primary key and non-key attribute within a table
<br>Denotes as X -&gt; Y, X - determinant and Y - dependent
<br><img alt="Pasted image 20240824205329.png" src="database-systems/pasted-image-20240824205329.png">
<br>What about this????

<br><img alt="Pasted image 20240824220745.png" src="database-systems/pasted-image-20240824220745.png">


<br><img alt="Pasted image 20240824205426.png" src="database-systems/pasted-image-20240824205426.png">
<br>
<br><img alt="Pasted image 20240824205628.png" src="database-systems/pasted-image-20240824205628.png">
<br><img alt="Pasted image 20240824205636.png" src="database-systems/pasted-image-20240824205636.png">
<br><br>
<br>Assume that R is a relation schema and X, Y and Z are subsets of R
<br>Reflexivity rule: If X is a super set of Y then X -&gt; Y
<br>Augmentation rule: If X -&gt; Y then XZ -&gt; YZ
<br>Transitivity rule: If X -&gt; Y and Y -&gt; Z then X -&gt; Z
<br>Union rule: If X -&gt; Y and X -&gt; Z, then X -&gt; YZ
<br>Decomposition rule: If X -&gt; YZ then X -&gt; Y and X -&gt; Z
<br>Pseudo transitivity rule: If X -&gt; Y and YZ -&gt; V then XZ -&gt; V
<br>Composition rule: If X -&gt; Y and V -&gt; W then XV -&gt; YW
<br>Self Determination: A-&gt; A for any A
<br>Extensivity: If AC -&gt; A and A -&gt; B, then AC -&gt; B. Similarly, AC -&gt; ABC and ABC -&gt; BC. This leads to AC -&gt; BC
<br><br>x -&gt; Y<br>
x - determinant<br>
y - dependent<br><br>
<br>A dependent is always a subset of the determinant, i.e, If X -&gt; Y and Y is a subset of X then it is called trivial functional dependency
<br>Ex :

<br><img alt="Pasted image 20240824210408.png" src="database-systems/pasted-image-20240824210408.png">
<br>Here {roll_no, name} -&gt; name is a trivial functional dependency, since, the dependent name is a subset of determinant set. Similarly, roll_no -&gt; roll_no is also an example of trivial function dependency.


<br><br>
<br>The dependent is strictly not a subset of the determinant ,i.e, if X -&gt; Y and Y is not a subset of X, then it is called Non-trivial functional dependency
<br>Here, roll_no -&gt; name is a non-trivial functional dependency since the dependent name is not a subset of determinant roll_no. Similarly, {roll_no, name} -&gt; age is also a non-trivial functional dependency since dependent age is not a subset of determinant set {roll_no, name}
<br><br>
<br>Entities of the dependent set are not dependent on each other, i.e, if a -&gt; {b,c} and there exists no functional dependency between b and c
<br>Here, roll_no -&gt; {name, age} is multivalued functional dependency 
<br><br>
<br>Dependent is indirectly dependent on determinant, i.e, if a -&gt; b and b -&gt; c, then according to axiom of transitivity, a -&gt; c, is a transitive functional dependency
<br><img alt="Pasted image 20240824212344.png" src="database-systems/pasted-image-20240824212344.png">
<br>Here enrol_no -&gt; dept and dept -&gt; building_no, hence, enrol_no -&gt; dept -&gt; building_no is a transitive functional dependency
<br><br>
<br>If more than one attribute is necessary to determine another attribute in an entity
<br><br>
<br>An attribute or a set of attributes uniquely determines another attribute or set of attributes. If a relation R has attributes X, Y, Z with the dependencies X -&gt; Y and X -&gt; Z which states that those dependencies are fully functional.
<br><img alt="Pasted image 20240824220628.png" src="database-systems/pasted-image-20240824220628.png">
<br><br>
<br>A non key attribute depends on a part of the composite key, rather than the whole key. If a relation R has attributes X, Y and Z where X and Y are composite key and Z is non key attribute. Then X -&gt; Z is a partial functional dependency in RBDMS.
<br><img alt="Pasted image 20240824220919.png" src="database-systems/pasted-image-20240824220919.png">
<br>Next:<a data-href="Decomposition" href="database-systems/decomposition.html" class="internal-link" target="_self" rel="noopener">Decomposition</a>]]></description><link>database-systems/mod-3-functional-dependencies.html</link><guid isPermaLink="false">Database Systems/Mod 3 - Functional Dependencies.md</guid><pubDate>Sat, 24 Aug 2024 18:08:06 GMT</pubDate><enclosure url="database-systems/pasted-image-20240824205329.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="database-systems/pasted-image-20240824205329.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Module 1]]></title><description><![CDATA[ 
 <br>Database - Collection of related data<br>
Database Management System or DBMS - Software system that facilitate user to design and maintain database<br><br>
<br>Data Independence
<br>Efficient data access
<br>Data integrity and security
<br>Data administration
<br>Concurrent access and crash recovery
<br>Reduced application development time
<br>Data model - collection of high level description constructs that hide many low-level storage details<br>
<br>Pictoral representation of tables
<br>Represents relationship between tables
<br>Also helps to define relational tables, primary and foreign keys
<br>Schema - description of data in terms of data model<br><br>
<br>Programs are isolated from changes in the way the data is structured and stored
<br>As long as we maintain the external schema, we can modify the other 2 schemas of an application:

<br>Logical Data Independence: users are shielded from the logical structure of the data(eg: a relation is split into 2 or more)
<br>Physical Data Independence: As long as the conceptual schema remains the same, the storage details of the application can be changed without affecting the user


<br><br>
<br>When multiple users access the database at the same time, DBMS should be able to order the requests
<br>Should also protect users from system failures:<br>
- Should make sure data is not lost<br>
- Should deal with crashes in the middle of a transaction<br>
Transaction - Conceptually indivisible group of operations that a user wants to perform
<br><img alt="Pasted image 20240823225050.png" src="database-systems/pasted-image-20240823225050.png"><br><img alt="Pasted image 20240823232542.png" src="database-systems/pasted-image-20240823232542.png"><br><br>
<br>Data redundancy and inconsistency

<br>Multiple file formats, duplication of information in different files


<br>Difficulty in accessing data

<br>Need to write a new program to carry out each task


<br>Data isolation

<br>Integrity problems
<br>Integrity constraints become part of program code
<br>Hard to add new constraints or change existing ones


<br>Atomicity of update

<br>Failures may leave database in an inconsistent state with partial updates carried out


<br>Concurrent access by multiple users

<br>Concurrent accessed needed for performance
<br>Uncontrolled concurrent accesses can lead to inconsistencies


<br>Security Problems
<br><br>
<br>Controlling Redundancy
<br>Restricting unauthorized access
<br>Persistent storage
<br>Backup and recovery
<br>Provide multiple user interface
<br>Represent complex relationship among data
<br>Enforcing integrity constraints
<br>Implications of using database: enforcing standards, flexibility, reduced application development time, availability of up-to-date information
<br><br>
<br>Cost of hardware and software is quite high which increases the budget of your organization
<br>Most database management systems are often complex systems, so the training is required for users to use the DBMS
<br>In some organizations, all data is integrated into a single database which can be damaged because of electric failure or database is corrupted on the storage media
<br>User of the same program at a time by many users sometimes lead to the loss of some data
<br>DBMS cant perform sophisticated calculations
<br><img alt="Pasted image 20240824011936.png" src="database-systems/pasted-image-20240824011936.png"><br><img alt="Pasted image 20240824012011.png" src="database-systems/pasted-image-20240824012011.png"><br><img alt="Pasted image 20240824012106.png" src="database-systems/pasted-image-20240824012106.png"><br><img alt="Pasted image 20240824012306.png" src="database-systems/pasted-image-20240824012306.png"><br><br><br>
<br>Responsible for:

<br>Authorizing access to the database
<br>Coordinating and monitoring its use
<br>Acquiring software and hardware resources


<br><br>
<br>Responsible for:

<br>Identifying the data to be stored
<br>Choosing appropriate structures to represent and store the data


<br><img alt="Pasted image 20240825102030.png" src="lib/media/pasted-image-20240825102030.png"><br>next: <a data-href="Module 1 - Categories" href="database-systems/module-1-categories.html" class="internal-link" target="_self" rel="noopener">Module 1 - Categories</a>]]></description><link>database-systems/module-1.html</link><guid isPermaLink="false">Database Systems/Module 1.md</guid><pubDate>Sun, 25 Aug 2024 04:52:36 GMT</pubDate><enclosure url="database-systems/pasted-image-20240823225050.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="database-systems/pasted-image-20240823225050.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Module 1 - Categories]]></title><description><![CDATA[ 
 <br>prev: <a data-href="Database Systems/Module 1" href="database-systems/module-1.html" class="internal-link" target="_self" rel="noopener">Database Systems/Module 1</a><br><br><br>
<br>What the system contains
<br>Also called entity-based or object-based data models
<br><br>
<br>How the system should be implemented
<br><br>
<br>How the system will be implemented on DBMS
<br><br>
<br>Eg: Relational data models used in many commercial systems
<br><br>
<br>Identifies the highest level relationships between the different entities
<br><img alt="Pasted image 20240824173029.png" src="database-systems/pasted-image-20240824173029.png">
<br><br>
<br>
Defines the structure of the data elements and set the relationships between them

<br>
Describes the data in as much detail as possible without regard to how they will be physically implemented in the database

<br>
Features:

<br>Includes all entities and the relationships between them
<br>All attributes for each entity are specified
<br>Primary key for each entity is specified
<br>Foreign keys are specified
<br>Normalization occurs at this level


<br>
<img alt="Pasted image 20240824173252.png" src="database-systems/pasted-image-20240824173252.png">

<br>
<img alt="Pasted image 20240824173300.png" src="database-systems/pasted-image-20240824173300.png">

<br><br>
<br>Represents how the model will be built in the database
<br>Shows all table structures, including column name, column data type, column constraints, primary key, foreign key and relationships between tables
<br><img alt="Pasted image 20240824173406.png" src="database-systems/pasted-image-20240824173406.png">
<br><br><br>
<br>Tree like structure
<br>One to many relationship
<br>Child has only one parent
<br><img alt="Pasted image 20240824173726.png" src="database-systems/pasted-image-20240824173726.png">
<br><br>
<br>Graph like structure
<br>Child may have one or more parents
<br>Many to Many relationship
<br><img alt="Pasted image 20240824173800.png" src="database-systems/pasted-image-20240824173800.png">
<br><br>
<br><img alt="Pasted image 20240824173844.png" src="database-systems/pasted-image-20240824173844.png">
<br><br>
<br><img alt="Pasted image 20240824174014.png" src="database-systems/pasted-image-20240824174014.png">
<br><br>
<br><img alt="Pasted image 20240824174034.png" src="database-systems/pasted-image-20240824174034.png">
<br><br>
<br><img alt="Pasted image 20240824174109.png" src="database-systems/pasted-image-20240824174109.png">
<br>Next: <a data-href="Mod 1 - Schema Architecture" href="database-systems/mod-1-schema-architecture.html" class="internal-link" target="_self" rel="noopener">Mod 1 - Schema Architecture</a>]]></description><link>database-systems/module-1-categories.html</link><guid isPermaLink="false">Database Systems/Module 1 - Categories.md</guid><pubDate>Sat, 24 Aug 2024 21:04:46 GMT</pubDate><enclosure url="database-systems/pasted-image-20240824173029.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="database-systems/pasted-image-20240824173029.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Keys]]></title><description><![CDATA[ 
 <br>Previous: <a data-href="Mod 2 - Entities Relationship Model" href="database-systems/mod-2-entities-relationship-model.html" class="internal-link" target="_self" rel="noopener">Mod 2 - Entities Relationship Model</a><br><br>
<br>Attribute or set of attributes which helps us to identify a row in a relation
<br>Allows us to find the relation between the two tables
<br>Keys helps us to uniquely identify a tuple in a relation by a combination of one or more attributes in that relation
<br><br>
<br>Group of single or multiple keys which identifies rows in a table
<br><img alt="Pasted image 20240825004814.png" src="lib/media/pasted-image-20240825004814.png">
<br><br>
<br>Attribute or group of attributes in a relation which helps us to uniquely identifies every tuple in a relation
<br>The same value can't appear more than once in that relation for that primary key attribute
<br>Rule:

<br>Rows can't have the same primary key value
<br>Every row must have a primary key value
<br>Cant be null
<br>Value of the primary key can never be modified or updated if any foreign key refers to it


<br><br>
<br>Set of keys that is minimal and can uniquely identify any data row in the table
<br>Primary key should be selected from the candidate keys
<br>Every table must have one candidate key
<br>Rules:

<br>Must contain unique values
<br>May have multiple attributes
<br>Must not contain null values
<br>Uniquely identify each record in a table
<br>Should contain minimum fields to ensure uniqueness


<br><br>
<br>All candidate keys are super keys cause candidate keys are chosen out of the super keys
<br>They key from which we cannot remove any fields, {Emp_SSN, Emp_Name} are candidate key but Emp_SSN only is super key cause it can identify a unique tuple hence Emp_Name is redundant
<br><br>
<br>Candidate keys which are not primary key are called as alternate keys
<br>Candidate key which is currently not the primary key
<br><br>
<br>An attribute value in a table that acts as the primary key in another table
<br>Useful in linking together two tables
<br><br>
<br>Set of key attributes that allows us to uniquely recognize a specific record
<br>Possible that each column may be not unique by itself within the database
<br>However, when combined with the other column or columns the combination of composite keys become unique
<br><img alt="Pasted image 20240825005723.png" src="lib/media/pasted-image-20240825005723.png">
<br><br>
<br>
An artificial key which aims to uniquely identify each record

<br>
Created when you dont have any natural primary key

<br>
Dont lend any meaning to the table

<br>
Ex:

<br><img alt="Pasted image 20240825005835.png" src="lib/media/pasted-image-20240825005835.png">

Next : <a data-href="Mod 2 - Relational Data Model" href="database-systems/mod-2-relational-data-model.html" class="internal-link" target="_self" rel="noopener">Mod 2 - Relational Data Model</a>

]]></description><link>database-systems/module-2-keys.html</link><guid isPermaLink="false">Database Systems/Module 2 - Keys.md</guid><pubDate>Sat, 24 Aug 2024 19:29:49 GMT</pubDate><enclosure url="lib/media/pasted-image-20240825004814.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="lib/media/pasted-image-20240825004814.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Schema Refinement]]></title><description><![CDATA[ 
 <br><br>
<br>Process to improve the design of a database schema to reduce redundancy and eliminate anomalies.
<br><img alt="Pasted image 20240824184232.png" src="database-systems/pasted-image-20240824184232.png">
<br>Normalization : Split the tables into small tables which will contain less number of attributes in such a way that table design must not contain any problem of inserting, deleting, updating anomalies and guarantees no redundancy<br>Normalization is a systematic approach of decomposing tables to eliminate data redundancy and undesirable characteristics like Insertion, Update and Deletion Anomalies.<br>Redundancy: Refers to repetition of same data<br>
Anomalies: Refers to the problems occurred after poorly planned and normalized databases where all the data is stored in one table which is sometimes called a flat file database<br>Insertion anomalies: It may not be possible to store some information unless some other information is stored as well<br>
Redundant storage: some info is stored repeatedly<br>
Update anomalies: if one copy of redundant data is updated, inconsistency is created if the rest of the redundant copies are not updated as well<br>
Deletion anomalies: It may not be possible to delete some information without losing some other information as well<br>Insertion anomaly and deletion anomaly - exist only due to redundancy, otherwise dont exist<br>eg:<br>
<img alt="Pasted image 20240824195642.png" src="database-systems/pasted-image-20240824195642.png"><br><img alt="Pasted image 20240824195736.png" src="database-systems/pasted-image-20240824195736.png"><br><br>
<br>Only way to avoid the repetition-of-information problem in the relation schema is to decompose it into two or more schemas
<br>Types of decomposition:

<br>Lossy Decomposition
<br>Lossless Decomposition


<br><img alt="Pasted image 20240824195855.png" src="database-systems/pasted-image-20240824195855.png">
<br><br><img alt="Pasted image 20240824195942.png" src="database-systems/pasted-image-20240824195942.png"><br><br>
<br>
Let R be a relation schema and let R1 and R2 form a decomposition of R. That is R = R1  R2

<br>
A decomposition is a lossless decomposition if there is no loss of information by replacing R with the two relation schemas R1  R2

<br>
Ex:<br>
<img alt="Pasted image 20240824200344.png" src="database-systems/pasted-image-20240824200344.png">

<br><br><br>
<br>Whenever we are going to form relational schema there should be some meaning among the attributes. This meaning is called semantics
<br>Semantics relates one attribute to another with some relation
<br><img alt="Pasted image 20240824200516.png" src="database-systems/pasted-image-20240824200516.png">
<br><br>
<br>
Mixing attributes of multiple entities may cause problems 

<br>
Information is stored redundantly wasting storage

<br>
Problems with update anomalies

<br>Insertion anomalies
<br>Deletion anomalies
<br>Modification anomalies<br>
<img alt="Pasted image 20240824200648.png" src="database-systems/pasted-image-20240824200648.png">

-Here whenever we insert the tuples there may in N students in one department, so Deptno, Dept name values are repeated N times which leads to data redundancy
<img alt="Pasted image 20240824200807.png" src="database-systems/pasted-image-20240824200807.png"><br>
<img alt="Pasted image 20240824200902.png" src="database-systems/pasted-image-20240824200902.png">

<br><br>![[Pasted image 20240824201119.png]]
![[Pasted image 20240824201129.png]]
Copy<br><br>
<br>Boyce Code Normal Form
<br>Multi Valued dependency and Fourth Normal Form
<br>Join dependency and Fifth Normal Form
<br>Next: <a data-href="Mod 3 - Functional Dependencies" href="database-systems/mod-3-functional-dependencies.html" class="internal-link" target="_self" rel="noopener">Mod 3 - Functional Dependencies</a>]]></description><link>database-systems/module-3.html</link><guid isPermaLink="false">Database Systems/Module 3.md</guid><pubDate>Sat, 24 Aug 2024 17:57:49 GMT</pubDate><enclosure url="database-systems/pasted-image-20240824184232.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="database-systems/pasted-image-20240824184232.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Normalization]]></title><description><![CDATA[ 
 <br>prev: <a data-href="Decomposition" href="database-systems/decomposition.html" class="internal-link" target="_self" rel="noopener">Decomposition</a><br>Process of minimizing redundancy from a relation or set of relations<br>
Involves restructuring the tables to successively meeting higher forms of Normalization<br><img alt="Pasted image 20240824215847.png" src="database-systems/pasted-image-20240824215847.png"><br>Redundant data - Storing the same data more than once, and can be removed without the loss of information<br><img alt="Pasted image 20240824220030.png" src="database-systems/pasted-image-20240824220030.png"><br><br>
<br>An attribute which can have more than one value for a primary key value
<br>Repeating groups are not allowed in a relational design, since all attributes have to be atomic
<br>Bad Practice:

<br><img alt="Pasted image 20240824220257.png" src="database-systems/pasted-image-20240824220257.png">


<br><br>Most databasees should be  3NF or BCNF to avoid database anomalies<br><br>
<br>If all the fields contain only scalar values( as opposed to list of values )
<br>Ex : NOT 1NF(AuName, AuPhone)

<br><img alt="Pasted image 20240824221158.png" src="database-systems/pasted-image-20240824221158.png">


<br>Method:<br>
<img alt="Pasted image 20240824221250.png" src="database-systems/pasted-image-20240824221250.png"><br>
<br>Ex: 1NF

<br><img alt="Pasted image 20240824221307.png" src="database-systems/pasted-image-20240824221307.png">


<br><br>
<br>Requirements: 

<br>Database should be in 1NF
<br>All non key attributes in the table should be functionally dependent on the primary key


<br><img alt="Pasted image 20240824225808.png" src="database-systems/pasted-image-20240824225808.png">
<br><br>
<br>All non-key attributes must only be functionally dependent on a candidate key, i.e, there can be no interdependencies among non-key attributes
<br>Requirements:

<br>Should be in second normal form
<br>No attribute is transitively dependent on the primary key


<br><img alt="Pasted image 20240824231821.png" src="database-systems/pasted-image-20240824231821.png">
]]></description><link>database-systems/normalization.html</link><guid isPermaLink="false">Database Systems/Normalization.md</guid><pubDate>Sat, 24 Aug 2024 17:48:28 GMT</pubDate><enclosure url="database-systems/pasted-image-20240824215847.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="database-systems/pasted-image-20240824215847.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>